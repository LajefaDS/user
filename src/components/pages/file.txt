<script>
import axios from 'axios';
import LayoutDiv from '../LayoutDiv.vue';
import Swal from 'sweetalert2'

export default {
  name: 'ProjectList',
  components: {
      LayoutDiv,
  },
  data() {
      return {
          projects: [],
          searchName: ''
      }
  },
  computed: {
      filteredProjects() {
          if (!this.searchName) return []
          
          return this.projects.filter(project => 
              project.name === this.searchName // Harus sama persis
          )
      }
  },
  created() {
      this.loadProjects()
  },
  methods: {
      loadProjects() {
          axios.get('/api/projects')
              .then(response => {
                  this.projects = response.data
              })
              .catch(error => {
                  console.error('Error:', error)
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'Gagal memuat data',
                      timer: 1500
                  })
              })
      },
      // ... existing delete method ...
  }
}
</script>

<script>
/* eslint-disable */ 
import axios from 'axios'

export default {
  data(){
    return{
        form: {
          id: '',
          name: ''
        },
        users: '',
        updateSubmit: false
    }
  },
  mounted() {
    this.load()
  },
  methods: {
    load(){
        axios.get('http://localhost:3000/users').then(res => {
        this.users = res.data
      }).catch ((err) => {
        console.log(err);
        
      })
    },
      add(){
      axios.post('http://localhost:3000/users/', this.form).then(res => {
          this.load()
          this.form.name = ''
      })
    },
    edit(user){ 
        this.updateSubmit = true
        this.form.id = user.id 
        this.form.name = user.name 
    },
    update(form){ 
       return axios.put('http://localhost:3000/users/' + form.id , {name: this.form.name}).then(res => {
        this.load()
        this.form.id = ''
        this.form.name = ''
        this.updateSubmit = false
      }).catch((err) => {
        console.log(err);
        
      })
    },
    del(user){
      axios.delete('http://localhost:3000/users/' + user.id).then(res =>{
          this.load()
          let index = this.users.indexOf(form.name)
          this.users.splice(index,1)
      })
    }
  }
}
</script>

Jalanin Server =
json-server db.json

<script>
// ... existing imports ...

export default {
  // ... other existing code ...

  methods: {
    // ... other existing methods ...

    ubahJumlah(delta) {
      let jumlah = parseInt(this.selectedBarang.jumlah)
      let stok = parseInt(this.selectedBarang.stok)
      
      if (jumlah + delta >= 0 && jumlah + delta <= stok) {
        this.selectedBarang.jumlah = jumlah + delta
        // Update stok secara real-time
        this.selectedBarang.stok = stok - delta
        
        // Optional: Update stok di database
        this.updateStokDatabase()
      }
    },

    // Menambahkan method baru untuk update stok di database
    async updateStokDatabase() {
      try {
        await axios.patch(`http://localhost:3000/users/${this.selectedBarang.id}`, {
          stok: this.selectedBarang.stok
        })
      } catch (err) {
        console.error('Error updating stock:', err)
        // Rollback perubahan jika gagal update database
        this.selectedBarang.stok = parseInt(this.selectedBarang.stok) + delta
        this.selectedBarang.jumlah = parseInt(this.selectedBarang.jumlah) - delta
        
        Swal.fire({
          icon: 'error',
          title: 'Gagal mengupdate stok!',
          text: 'Terjadi kesalahan saat mengupdate stok barang',
          showConfirmButton: true
        })
      }
    },

    async update() {
      this.isSaving = true
      try {
        const dataPeminjaman = {
          ...this.form,
          barang: {
            id: this.selectedBarang.id,
            name: this.selectedBarang.name,
            jumlah: this.selectedBarang.jumlah,
            stok: this.selectedBarang.stok // Menambahkan stok ke data peminjaman
          }
        }

        // Simpan ke database lokal
        await axios.post('http://localhost:3000/peminjaman', dataPeminjaman)

        Swal.fire({
          icon: 'success',
          title: 'Peminjaman berhasil disimpan!',
          showConfirmButton: false,
          timer: 1500
        })

        this.isSaving = false
        // Reset form
        this.form.name = ''
        this.form.kelas = ''
        this.selectedBarang.jumlah = 0
        
        // Redirect setelah berhasil
        this.$router.push('/list')
      } catch (err) {
        console.error('Error updating data:', err)
        this.isSaving = false
        Swal.fire({
          icon: 'error',
          title: 'Terjadi Kesalahan!',
          text: 'Gagal menyimpan peminjaman',
          showConfirmButton: true
        })
      }
    },
  }
}
</script>

<input
                type="text"
                :value="selectedBarang ? selectedBarang.name : ''"
                class="form-control"
                id="description"
                name="description"
                disabled
              >

              <template>
    <layout-div>
          <div class="container">
              <h2 class="text-center mt-5 mb-3">Project Manager</h2>
              <div class="card">
                  <div class="card-header">
                  </div>
                  <div class="card-body">
               
                      <table class="table table-bordered">
                          <thead>
                              <tr>
                                  <th>Name</th>
                                  <th>Kelas</th>
                                  <th width="240px">Action</th>
                              </tr>
                          </thead>
                          <tbody>
                               
                              <tr v-for="project in projects" :key="project.id">
                                  <td>{{project.name}}</td>
                                  <td>{{project.description}}</td>
                                  <td>
                                      <router-link :to="`/show/${project.id}`" class="btn btn-outline-info mx-1">Show</router-link>
                                      <router-link :to="`/edit/${project.id}`" class="btn btn-outline-success mx-1">Edit</router-link>
                                      <button 
                                          @click="handleDelete(project.id)"
                                          className="btn btn-outline-danger mx-1">
                                          Delete
                                      </button>
                                  </td>
                              </tr>
                                   
                          </tbody>
                      </table>
                  </div>
              </div>
          </div>
      </layout-div>
  </template>
   
   <script>
   import axios from 'axios';
   import LayoutDiv from '../LayoutDiv.vue';
   import Swal from 'sweetalert2'
      
   export default {
       name: 'ProjectList',
       components: {
         LayoutDiv,
       },
       data() {
         return {
           projects: []
         };
       },
       created() {
         this.fetchProjectList();
         // Mulai interval untuk refresh data setiap 3 detik
         this.startAutoRefresh();
       },
       unmounted() {
         // Hentikan interval saat komponen tidak digunakan
         this.stopAutoRefresh();
       },

methods: {
  fetchProjectList() {
    axios.get('/api/projects')
      .then(response => {
          console.log('Data dari API:', response.data); // Tambahkan ini untuk debugging
          this.projects = response.data;
          return response
      })
      .catch(error => {
        console.error('Error fetching projects:', error);
        return error
      });
  },
  startAutoRefresh() {
    this.refreshInterval = setInterval(() => {
      this.fetchProjectList();
    }, 3000);
  },
  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
    }
  },
  handleDelete(id) {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        axios.delete(`/api/projects/${id}`)
        .then(response => {
          Swal.fire({
            icon: 'success',
            title: 'Project deleted successfully!',
            showConfirmButton: false,
            timer: 1500
          })
          this.fetchProjectList();
          return response
        })
        .catch(error => {
          Swal.fire({
            icon: 'error',
            title: 'An Error Occured!',
            showConfirmButton: false,
            timer: 1500
          })
          return error
        });
      }
    })
  }
}
   };
   </script>

   <style scoped>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

body { 
  font-family: 'Poppins', sans-serif; 
  background: #eef1f6; 
}

.btn-back {
  background: #4364F7;
  color: white;
  border: none;
  font-weight: 600;
  padding: 8px 20px;
  border-radius: 8px;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
}

.btn-back:hover {
  background: #0052D4;
  color: white;
  transform: translateX(-5px);
  box-shadow: 0 4px 12px rgba(67, 100, 247, 0.2);
}

.navbar-custom { 
  background: linear-gradient(90deg, #0052D4, #4364F7, #6FB1FC); 
  padding: 15px 0;
}

.navbar-brand img { 
  height: 50px; 
}

.navbar-brand h1 { 
  font-size: 1.5rem; 
  color: white; 
  margin: 0; 
  font-weight: 600; 
}

.list-group-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  font-size: 1.2rem;
  background: white;
  border-radius: 10px;
  margin-bottom: 12px;
  transition: transform 0.3s ease-in-out;
}

.list-group-item:hover {
  transform: scale(1.02);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.btn-secondary {
  background: #ff4d4d;
  border: none;
  font-weight: 600;
  padding: 8px 15px;
  border-radius: 8px;
  transition: 0.3s;
}

.btn-secondary:hover {
  background: #cc0000;
}

.search-container {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.search-container input {
  width: 100%;
  padding: 12px;
  border-radius: 30px;
  border: 1px solid #ddd;
  outline: none;
  transition: 0.3s;
}

.search-container input:focus {
  border-color: #4364F7;
  box-shadow: 0 0 8px rgba(67, 100, 247, 0.2);
}

@media (max-width: 768px) {
  .navbar-brand h1 { 
    font-size: 1.2rem; 
  }
}

@media (max-width: 480px) {
  .navbar-brand h1 { 
    font-size: 1rem; 
  }
}
</style>

<style scoped>
.navbar-custom { 
  background: linear-gradient(90deg, #0052D4, #4364F7, #6FB1FC); 
  padding: 15px 0;
}

.navbar-brand img { 
  height: 50px; 
}

.navbar-brand h1 { 
  font-size: 1.5rem; 
  color: white; 
  margin: 0; 
  font-weight: 600; 
}

.card-custom {
  border-radius: 20px;
  padding: 30px;
  background: white;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.counter {
  display: flex;
  justify-content: center;
  align-items: center;
}

.counter button {
  border: none;
  background: #0052D4;
  color: white;
  font-size: 1.2rem;
  width: 35px;
  height: 35px;
  border-radius: 50%;
}

.counter input {
  width: 50px;
  text-align: center;
  border: none;
  font-size: 1.2rem;
  margin: 0 10px;
  background: transparent;
}
</style>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

body { 
  font-family: 'Poppins', sans-serif; 
  background: #eef1f6; 
}

.navbar-custom { 
  background: linear-gradient(90deg, #0052D4, #4364F7, #6FB1FC); 
  padding: 15px 0;
}

.navbar-brand img { 
  height: 50px; 
}

.navbar-brand h1 { 
  font-size: 1.5rem; 
  color: white; 
  margin: 0; 
  font-weight: 600; 
}

.list-group-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  font-size: 1.2rem;
}

.btn-back {
  background: #4364F7;
  color: white;
  border: none;
  font-weight: 600;
  padding: 8px 20px;
  border-radius: 8px;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
}

.btn-back:hover {
  background: #0052D4;
  color: white;
  transform: translateX(-5px);
  box-shadow: 0 4px 12px rgba(67, 100, 247, 0.2);
}

@media (max-width: 768px) {
  .navbar-brand h1 { 
    font-size: 1.2rem; 
  }
}

@media (max-width: 480px) {
  .navbar-brand h1 { 
    font-size: 1rem; 
  }
}
</style>

methods: {
  submitForm() {
    if (!this.selectedBarang || this.selectedBarang.jumlah <= 0) {
      Swal.fire('Error', 'Jumlah barang harus lebih dari 0', 'error');
      return;
    }

    // Ambil waktu sekarang dalam format Indonesia
    const now = new Date();
    const formatter = new Intl.DateTimeFormat('id-ID', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
      timeZone: 'Asia/Jakarta'
    });

    const formattedDate = formatter.format(now).replace(/\//g, '-'); // Ubah format menjadi dd-MM-yyyy, HH:mm:ss

    this.form.tanggal = formattedDate;

    const peminjaman = {
      nama: this.form.nama,
      kelas: this.form.kelas,
      namabarang: this.selectedBarang.barang,
      jumlahbarang: this.selectedBarang.jumlah,
      tanggal: this.form.tanggal // Waktu yang sudah diformat
    };

    axios.post('http://192.168.1.6:3000/database', peminjaman)
      .then(() => {
        return axios.patch(`http://192.168.1.6:3000/users/${this.selectedBarang.id}`, {
          stok: this.selectedBarang.stok - this.selectedBarang.jumlah
        });
      })
      .then(() => {
        Swal.fire('Success', 'Peminjaman berhasil diajukan!', 'success');
        this.$router.push('/list');
      })
      .catch(err => {
        console.error('Error processing peminjaman:', err);
        Swal.fire('Error', 'Terjadi kesalahan saat menyimpan', 'error');
      });
  }
}